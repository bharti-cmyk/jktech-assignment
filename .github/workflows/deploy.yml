name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Install dependencies and run tests for api-gateway
      - name: Install dependencies and run tests for api-gateway
        working-directory: ./api-gateway
        run: |
          npm install
          npm test

      # Install dependencies and run tests for ingestion
      - name: Install dependencies and run tests for ingestion
        working-directory: ./ingestion
        run: |
          npm install
          npm test

      # Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      # Create .env file for api-gateway
      - name: Create .env file for api-gateway
        run: |
          echo "${{ secrets.API_GATEWAY_ENV }}" > ./api-gateway/.env

      # Create .env file for ingestion
      - name: Create .env file for ingestion
        run: |
          echo "${{ secrets.INGESTION_ENV }}" > ./ingestion/.env

      # Verify .env files
      - name: Verify .env files
        run: |
          ls -l ./api-gateway/.env
          cat ./api-gateway/.env
          ls -l ./ingestion/.env
          cat ./ingestion/.env

      # Check Docker and Docker Compose versions
      - name: Check Docker version
        run: docker --version

      - name: Check Docker Compose version
        run: docker-compose --version

      # Build Docker images
      - name: Build Docker images
        run: docker-compose build

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up SSH for deployment
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Deploy to DigitalOcean Droplet
      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no root@142.93.215.48 << 'EOF'
          cd jktech-assignment
          git pull origin main
          docker-compose down
          docker-compose up -d --build
          EOF